name: build and publish

on:
  release:
    types: [published]

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-container:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.1.1

      # Login against a Docker registry
      # https://github.com/docker/login-action
      - name: Log into registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Set up QEMU for cross-platform builds below
      - name: Set up QEMU
        if: github.event_name == 'release'
        uses: docker/setup-qemu-action@v1
        with:
          image: tonistiigi/binfmt:latest
          platforms: all

      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v3

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        if: github.event_name == 'release'
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}

      # Build and push Docker image with Buildx
      # https://github.com/docker/build-push-action
      - name: Build and publish Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          # Cache layers to and from the container repo.
          # This minimizes the amount of times we have to rebuild pandoc.
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  # Use the container we just built to build the guide and attach it to the release
  render-samples:
    needs: build-container
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/trustedcomputinggroup/pandoc:latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.1.1
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Render for release
        uses: trustedcomputinggroup/markdown@latest
        with:
          input-md: guide.md
          extra-build-options: "--gitstatus --plain_quotes"
          output-pdf: guide.pdf
          output-docx: guide.docx

      - name: Upload to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: guide.pdf
          tag: ${{ github.ref }}
          overwrite: true
          body: "Guide (PDF)"

      - name: Upload to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: guide.docx
          tag: ${{ github.ref }}
          overwrite: true
          body: "Guide (Word)"
